---
resource_types:
  - name: pcf-pool
    type: docker-image
    source:
      repository: cftoolsmiths/toolsmiths-envs-resource
  - name: gcs-resource
    type: docker-image
    source:
      repository: observabilityresearch/gcs-resource
  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final
resources:
  - name: concourse-tasks
    type: git
    source:
      uri: https://github.com/pivotal-cf/concourse-tasks
      branch: master
  - name: tas2to-image
    type: docker-image
    source:
      repository: gcr.io/cf-denver/tas2to-ci
      username: _json_key
      password: ((service-account-json))
  - name: wf-nozzle
    type: git
    source:
      uri: git@github.com:wavefrontHQ/cloud-foundry-release
      branch: create-pipeline
      private_key: ((git-key.private_key))
  - name: platform-automation
    type: pivnet
    source:
      product_slug: platform-automation
      api_token: ((pivnet-refresh-token))
#  - name: denver-locks
#    type: git
#    source:
#      uri: git@github.com:pivotal-cf/denver-locks
#      branch: master
#      private_key: ((git-key.private_key))
#  - name: concourse-tasks
#    type: git
#    source:
#      uri: https://github.com/pivotal-cf/concourse-tasks
#      branch: master
#  - name: terraform-vars
#    type: gcs-resource
#    source:
#      bucket: tas2to
#      json_key: ((service-account-json))
#      versioned_file: "envs/t2-tas212/terraform-vars.zip"
  - name: wf-nozzle-version
    type: semver
    source:
      driver: gcs
      bucket: tas2to
      key: versions/wf-nozzle
      json_key: ((service-account-json))
      initial_version: 0.0.6
  - name: tas-env
    type: pcf-pool
    source:
      api_token: ((toolsmiths-api-key))
      hostname: environments.toolsmiths.cf-app.com
      pool_name: "us_2_12"
jobs:
  - name: bake-and-install-wf-nozzle
    serial: true
    plan:
      - get: wf-nozzle
      - get: wf-nozzle-version
      - get: tas2to-image
      - get: tas-env
        trigger: true
        passed: [claim-tas-env]
      - get: config
        resource: wf-nozzle
      - get: concourse-tasks
      - in_parallel:
          - get: platform-automation-image
            resource: platform-automation
            params:
              globs: [ "*image*.tgz" ]
              unpack: true
            trigger: true
          - get: platform-automation-tasks
            resource: platform-automation
            params:
              globs: [ "*tasks*.zip" ]
              unpack: true
      - task: "show-claimed-tas-env"
        file: concourse-tasks/toolsmiths/claim-pooled-env/task.yml
        input_mapping:
          pooled-env: tas-env
      - task: prepare-platform-automation-tasks-with-secrets
        <<: *prepare-platform-automation-tasks-with-secrets
      - task: prepare-tas2to-tasks-with-secrets
        <<: *prepare-tas2to-tasks-with-secrets
      - task: bake-tile
        file: wf-nozzle/ci/tasks/bake.yml
        image: tas2to-image
        input_mapping:
          tile-src: wf-nozzle
      - task: "update-smith-config-files"
        file: config/ci/tasks/update-smith-config-files.yml
        image: tas2to-image
      - task: "upload-product"
        file: platform-automation-tasks/tasks/upload-product.yml
        image: platform-automation-image
        input_mapping:
          product: baked-tile
          env: tas-env
        params:
          ENV_FILE: pcf.yml
      - task: "stage-configure-apply"
        file: platform-automation-tasks/tasks/stage-configure-apply.yml
        image: platform-automation-image
        input_mapping:
          env: tas-env
          product: baked-tile
          vars: tas-env
          config: updated-config
        params:
          ENV_FILE: pcf.yml
          CONFIG_FILE: ci/config/wavefront-nozzle.yml
          VARS_FILES: vars/metadata
#      - in_parallel:
#          - get: platform-automation-image
#            resource: platform-automation
#            params:
#              globs: [ "*image*.tgz" ]
#              unpack: true
#            trigger: true
#          - get: platform-automation-tasks
#            resource: platform-automation
#            params:
#              globs: [ "*tasks*.zip" ]
#              unpack: true
#          - get: wf-nozzle
#            trigger: true
#          - get: tas2to-image
#          - get: denver-locks
#          - get: concourse-tasks
#          - get: terraform-vars
#            params:
#              unpack: true
#          - get: wf-nozzle-version
#            params:
#              pre: build
#      - put: wf-nozzle-version
#        params:
#          file: wf-nozzle-version/version
#      - task: prepare-platform-automation-tasks-with-secrets
#        <<: *prepare-platform-automation-tasks-with-secrets
#      - task: prepare-tas2to-tasks-with-secrets
#        <<: *prepare-tas2to-tasks-with-secrets
#      - task: bake-tile
#        file: wf-nozzle/ci/tasks/bake.yml
#        image: tas2to-image
#        input_mapping:
#          tile-src: wf-nozzle
#      - task: upload-and-stage-product
#        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
#        image: platform-automation-image
#        input_mapping:
#          product: baked-tile
#          env: wf-nozzle
#        params:
#          ENV_FILE: ci/t2-tas212/env/env.yml
#      - task: configure-product
#        file: platform-automation-tasks/tasks/configure-product.yml
#        image: platform-automation-image
#        input_mapping:
#          env: wf-nozzle
#          vars: terraform-vars
#          config: wf-nozzle
#        params:
#          ENV_FILE: ci/t2-tas212/env/env.yml
#          CONFIG_FILE: ci/config/tas2to.yml
#          VARS_FILES: |
#            vars/terraform-outputs-opsmanager.yml
#            vars/terraform-outputs-tas.yml
#            vars/terraform-outputs-tkgi.yml
#      - task: apply-tas2to-changes
#        file: tas2to-tasks-with-secrets/ci/tasks/selective-apply-changes.yml
#        image: platform-automation-image
#        input_mapping:
#          env: wf-nozzle
#        params:
#          ENV_FILE: ci/t2-tas212/env/env.yml
#          PRODUCTS: tas-2-to
#      - task: test-installation
#        file: tas2to-tasks-with-secrets/ci/tasks/test.yml
#        image: tas2to-image
#        params:
#          PCF_FOUNDATION_NAME: pcr-proxy-tas2to-212
  - name: test-foundation
    plan:
      - get: wf-nozzle
      - get: tas2to-image
      - get: tas-env
        trigger: true
        passed: [bake-and-install-wf-nozzle]
      - task: test-installation
        file: wf-nozzle/ci/tasks/test.yml
        image: tas2to-image

  - name: claim-tas-env
    plan:
      - put: tas-env
        params:
          action: claim
        inputs: []
  - name: "unclaim-tas-env"
    plan:
      - get: tas-env
      - put: tas-env
        params:
          action: unclaim
          env_file: tas-env/metadata
        inputs:
          - tas-env
